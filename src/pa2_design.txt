		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----


Mrunal Inge <mrunalna@buffalo.edu>
Neel Dungrani <neelvija@buffalo.edu >


---- PRELIMINARIES ----

>> Office hours and OS Fridays were really helpful.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

1) We implemented args passing by tokeninzing the incoming argument and separating filename/instruction and arguments in process_execute().
2) After separting the filename and arguments, we push arguments one by one onto the stack. 
3) Add appropriate padding since the arguments address must be a multiple of four.
4) Then we add null sentinel to separate addresses of arguments and actual arguments.
5) Then we push the addresses of arguments on the stack in the same order as the arguments.
6) Then we add the address of the first address argument.
7) Then add the number of arguments that are pushed on the stack.
8) Then we add null sentinel as fake return address.
9) Care must be taken that the contents of user stack must not cross PHYSBASE, since above PHYSBASE is kernel space. To ensure
this we have subtracted length of each element from PHYSBASE before adding it to the stack.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
The strtok_r() function is a reentrant version strtok(). The saveptr argument is a pointer to a char * variable that is 
used internally by strtok_r() in order to maintain context between successive calls that parse the same string. On the first
call to strtok_r(), str should point to the string to be parsed, and the value of saveptr is ignored. In subsequent calls, 
str should be NULL, and saveptr should be unchanged since the previous call.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
1) Checking whether the arguments are over the
limit.
2) Decrease the processing time in kernel.
3) To validate the arguments before passing it
to kernel to avoid kernel fail. 

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We created a child_process struct to keep record of children of a particular thread
struct child_process_struct {
    int child_pid;
    int load_status;
    struct list_elem child_elem;
    //struct semaphore load_semaphore;
    int is_waited_on;
    int exit_status;
    int is_exited;
};
struct lock filesys_lock; //defined in syscall.c to implement a lock on file operations.

We created file_descriptor struct to keep track of each open file for each thread.
struct file_descriptor {
  int fd;
  struct list_elem file_elem;
  struct file *file_struct;
};

In thread.h in struct thread, we have added following variables.
    struct file *executable_file;   //to keep track of open executable file which current thread has so as to close it while we exit so that we can write again in the file. 
    struct list open_files;   // To keep list of open files for a thread
    int fd;   //used in read write sys calls .
    int exit_status;                    // thread exit status
    struct thread *parent;  //parent of current thread if any
    struct list child_threads_list;     //list of the child threads
    struct child_process_struct* child_process;  //used to implement wait and exec sys call 


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
>> we have one list in each thread which holds struct elems of file_structs
>> We have defined file_descriptor_struct as mentioned above which helps creating record of each file. Then file_elem of each struct is added to open_files list of particular thread.
---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

The code for reading and writing from kernel is implemented using read/write system call. Each function takes three parameters as input, fd, pointer to buffer and buffer size. Based on fd we decide where the write should be performed. In read, we read from the console and put it in buffer. For file read/write, we use file_sys calls file_read and file_write. To prevent bad read write, all the checks have been performed to avoid the pointer either to be NULL or in kernel space or not mapped to a page.
  

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
>> we are maintaining a list of child structs for each thread which holds the pid, exit status, is_exited flag,is_waited_on flag of each child process. We first find the child with pid provided in argument if there is no such child we return -1, Then we check is_waited_on flag if it is true we return -1, then we check the is_exited flag and while that flag is false we perform thread_yield() to make parent thread wait for child to exit. Once child exits, child updates the exit status by finding it's own struct in it's parent's child list. Then we change the is_waited_on flag to true and return the exit status of child.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

 For avoiding bad memory reading, we have applied some checks, like if the pointer read should not be null, the pointer address is above PYHS_BASE, and the memory is mapped to a page. If ever for 
Some reason above checks are bypassed, and the userprogram reads the bad memory, it generates the page-fault which transfer execution flow to the kill() function in 
exception.c, from where we give a call to our exit syscall, which frees all the acquired resources, like memory and locks and ensures thread execution ends properly.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> In exec system call we first call process_execute() which creates new thread for child process, while creating new child thread we create struct of child process, initialize it's variables and add it to child_threads_list of that struct for wait system call and also assign that struct to child_process_struct which holds current child. This struct holds int variable load_status which is initially 0. After that in start_process() when control returns from load() we check the success, if it is true we change the load_status to 1 or if load() returns false then we change it to -1. So in exec system call we check load_status of current child while it is 0 we perform thread_yield to make parent wait for child to load and once it is loaded if it's status is 1 then we return pid returned by process_execute otherwise we return -1;

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?


We have implemented a struct of child_process, which maintains the details the child of the particular thread, which is then added to to the child_threads_list. It does not matter if the child exits before or after the parent, the child process has a pointer of its parent. It accesses the parent's child_threads_list, finds itself and updates the exit_status of itself in the list of parent. Then we close all the open files, free allocated memory and ensure proper exit.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
>> we are validating each user memory before derefencing it and before passing it as arguments to system calls by this we can terminate and exit from process safely by freeing resources before we start execution and crashes.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
>> we have fd numbers unique to each processors by which even if same file is opened multiple times whether by same thread or different we can keep track of it independently. As we have synhronization in system calls no two threads can write or read at same time. 

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
>> we did not change the default tid_t and pid_t mapping.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
